#!/bin/bash
# xatlas 0.3
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://documentation.dnanexus.com/developer for tutorials on how
# to modify this file.

main() {

    echo "Value of in: '$in'"
    echo "Value of in_index: '$in_index'"
    echo "Value of ref: '$ref'"
    echo "Value of sample_name: '$sample_name'"
    echo "Value of prefix: '$prefix'"
    echo "Value of capture_bed: '$capture_bed'"
    echo "Value of min_p_value: '$min_p_value'"
    echo "Value of min_snp_mapq: '$min_snp_mapq'"
    echo "Value of min_indel_mapq: '$min_indel_mapq'"
    echo "Value of max_coverage: '$max_coverage'"
    echo "Value of block_abs_limit: '$block_abs_limit'"
    echo "Value of block_rel_limit: '$block_rel_limit'"
    echo "Value of gvcf: '$gvcf'"
    echo "Value of bgzf: '$bgzf'"
    echo "Value of snp_logit_params: '$snp_logit_params'"
    echo "Value of indel_logit_params: '$indel_logit_params'"
    echo "Value of enable_strand_filter: '$enable_strand_filter'"
    echo "Value of catch_fail: '${catch_fail}'"

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    echo "Downloading inputs"
    in_name=$(dx describe "${in}" --name)
    in_name_idx=$(dx describe "${in_index}" --name)

    dx download "$in" -o $in_name & 
    dx download "$in_index" -o $in_name_idx &

    dx download "$ref" -o reference.fa &
    wait
    echo "Finished downloading inputs"

    # value parameters
    params="-v ${min_p_value} -m ${min_snp_mapq} -n ${min_indel_mapq} -M ${max_coverage} -A ${block_abs_lim} -R ${block_rel_lim} "
    
    # bool parameters
    if [ "${gvcf}" = true ]
    then
        params=${params}" -g "
    fi

    if [ "${bgzf}" = true ]
    then
        params=${params}" -z "
    fi

    # file parameters
    if [ -n "$capture_bed" ]
    then
        dx download "$capture_bed" -o capture_bed
        params=${params}" -c capture_bed "
    fi
    if [ -n "$snp_logit_params" ]
    then
        dx download "$snp_logit_params" -o snp_logit_params
        params=${params}" -S snp_logit_params "
    fi

    if [ -n "$indel_logit_params" ]
    then
        dx download "$indel_logit_params" -o indel_logit_params
        params=${params}" -I indel_logit_params "
    fi
    echo "Using param string" $params

    docker pull acenglish/xatlas
    docker run --cpus=$(nproc) -v `pwd`:/data acenglish/xatlas \
            -r reference.fa -P -t $(nproc) -i ${in_name} -s ${sample_name} -p ${prefix} \
            ${params} || if [ "$catch_fail" = true ]; then echo "xAtlas failed to finish. See logs."; exit 1; fi

    output_vcf_snp=$(dx upload ${prefix}_snp.vcf* --brief)
    output_vcf_indel=$(dx upload ${prefix}_indel.vcf* --brief)

    # The following line(s) use the utility dx-jobutil-add-output to format and
    # add output variables to your job's output as appropriate for the output
    # class.  Run "dx-jobutil-add-output -h" for more information on what it
    # does.

    dx-jobutil-add-output output_vcf_snp "$output_vcf_snp" --class=file
    dx-jobutil-add-output output_vcf_indel "$output_vcf_indel" --class=file
}
